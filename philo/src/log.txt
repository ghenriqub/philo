/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleanup.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/11 21:29:49 by ghenriqu          #+#    #+#             */
/*   Updated: 2025/10/11 21:40:28 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	destroy_mutexes(t_rules *rules, t_philosopher *philos, int philo_count)
{
	int	i;

	i = 0;
	while (i < rules->num_philos && rules->forks)
	{
		pthread_mutex_destroy(&rules->forks[i]);
		i++;
	}
	if (rules->forks)
		free(rules->forks);
	pthread_mutex_destroy(&rules->print_lock);
	pthread_mutex_destroy(&rules->death_lock);
	if (philos)
	{
		i = 0;
		while (i < philo_count)
		{
			pthread_mutex_destroy(&philos[i].eat_lock);
			i++;
		}
	}
}

void	cleanup_all(t_rules *rules, t_philosopher *philos, pthread_t *threads)
{
	if (threads)
		free(threads);
	destroy_mutexes(rules, philos, rules->num_philos);
	if (philos)
		free(philos);
	if (rules)
		free(rules);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   functions.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/19 14:01:25 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 20:15:38 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	ft_atoi(const char *nptr)
{
	long	result;	
	int		i;
	int		sign;

	i = 0;
	sign = 1;
	result = 0;
	while (nptr[i] == ' ' || nptr[i] == '\t' || nptr[i] == '\n'
		|| nptr[i] == '\v' || nptr[i] == '\f' || nptr[i] == '\r')
		i++;
	if (nptr[i] == '-' || nptr[i] == '+')
	{
		if (nptr[i] == '-')
			sign = -1;
		i++;
	}
	while (nptr[i] >= '0' && nptr[i] <= '9')
	{
		result = result * 10 + (nptr[i] - '0');
		if (result * sign > INT_MAX || result * sign < INT_MIN)
			return (0);
		i++;
	}
	return ((int)(result * sign));
}

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

size_t	ft_strlen(const char *str)
{
	int	i;

	if (!str)
		return (0);
	i = 0;
	while (str[i])
		i++;
	return (i);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_args.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/28 19:58:06 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 21:47:44 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void	init_rules_from_args(t_rules *rules, char **argv)
{
	rules->num_philos = ft_atoi(argv[1]);
	rules->time_to_die = ft_atoi(argv[2]);
	rules->time_to_eat = ft_atoi(argv[3]);
	rules->time_to_sleep = ft_atoi(argv[4]);
	rules->meals_limit = -1;
	if (argv[5])
		rules->meals_limit = ft_atoi(argv[5]);
	rules->someone_died = 0;
}

void	set_args(t_rules *rules, char **argv)
{
	int	i;

	init_rules_from_args(rules, argv);
	rules->forks = malloc(sizeof(pthread_mutex_t) * rules->num_philos);
	if (!rules->forks)
		return ;
	i = 0;
	while (i < rules->num_philos)
	{
		if (pthread_mutex_init(&rules->forks[i], NULL) != 0)
		{
			while (--i >= 0)
				pthread_mutex_destroy(&rules->forks[i]);
			free(rules->forks);
			rules->forks = NULL;
			return ;
		}
		i++;
	}
	pthread_mutex_init(&rules->print_lock, NULL);
	pthread_mutex_init(&rules->death_lock, NULL);
}

t_philosopher	*ft_init_philos(t_rules *rules)
{
	t_philosopher	*philos;
	int				i;

	philos = malloc(sizeof(t_philosopher) * rules->num_philos);
	if (!philos)
		return (NULL);
	i = 0;
	rules->start = timestamp_ms();
	while (i < rules->num_philos)
	{
		philos[i].id = i + 1;
		philos[i].rules = rules;
		philos[i].last_meal = rules->start;
		philos[i].count_eat = 0;
		if (pthread_mutex_init(&philos[i].eat_lock, NULL) != 0)
		{
			while (--i >= 0)
				pthread_mutex_destroy(&philos[i].eat_lock);
			free(philos);
			return (NULL);
		}
		i++;
	}
	return (philos);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/28 19:43:07 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 21:48:01 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	main(int argc, char **argv)
{
	t_rules			*rules;
	t_philosopher	*philos;

	if (!validate_args(argc, argv))
		return (1);
	rules = malloc(sizeof(t_rules));
	if (!rules)
		return (1);
	set_args(rules, argv);
	if (!rules->forks)
	{
		free(rules);
		printf(ERROR_MUTEX);
		return (1);
	}
	philos = ft_init_philos(rules);
	if (!philos)
	{
		destroy_mutexes(rules, NULL, 0);
		free(rules);
		printf(ERROR_MALLOC);
		return (1);
	}
	ft_philosophers(philos, rules);
	cleanup_all(rules, philos, NULL);
}

void	log_action(t_philosopher *philo, const char *action, t_rules *rules)
{
	pthread_mutex_lock(&rules->death_lock);
	if (!rules->someone_died)
	{
		pthread_mutex_lock(&philo->rules->print_lock);
		printf("%ld %d %s\n",
			timestamp_ms() - rules->start, philo->id, action);
		pthread_mutex_unlock(&philo->rules->print_lock);
	}
	pthread_mutex_unlock(&rules->death_lock);
}

long	timestamp_ms(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000L + tv.tv_usec / 1000L);
}

int	advance_time(t_rules *rules, int stop)
{
	long	begin;

	begin = timestamp_ms();
	while (1)
	{
		pthread_mutex_lock(&rules->death_lock);
		if (rules->someone_died)
		{
			pthread_mutex_unlock(&rules->death_lock);
			return (0);
		}
		pthread_mutex_unlock(&rules->death_lock);
		if ((timestamp_ms() - begin) >= stop)
			break ;
		usleep(500);
	}
	return (1);
}

int	check_someone_died(t_philosopher *philo, t_rules *rules)
{
	pthread_mutex_lock(&rules->death_lock);
	if (rules->someone_died)
	{
		pthread_mutex_unlock(&rules->death_lock);
		return (1);
	}
	pthread_mutex_unlock(&rules->death_lock);
	pthread_mutex_lock(&philo->eat_lock);
	if (rules->meals_limit > 0 && philo->count_eat >= rules->meals_limit)
	{
		pthread_mutex_unlock(&philo->eat_lock);
		return (1);
	}
	pthread_mutex_unlock(&philo->eat_lock);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   monitoring.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/30 15:50:13 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 21:36:06 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	*monitor_routine(void *arg)
{
	t_philosopher	*philos;
	t_rules			*rules;
	int				i;
	long			now;

	philos = (t_philosopher *)arg;
	rules = philos[0].rules;
	while (!check_died(rules))
	{
		i = -1;
		while (++i < rules->num_philos)
		{
			now = timestamp_ms();
			pthread_mutex_lock(&philos[i].eat_lock);
			if (now - philos[i].last_meal > rules->time_to_die
				&& !(rules->meals_limit > 0
					&& philos[i].count_eat >= rules->meals_limit))
				return (someone_dead(philos, rules, i, now));
			pthread_mutex_unlock(&philos[i].eat_lock);
		}
		if (is_finished(philos, rules))
			return (NULL);
		usleep(1000);
	}
	return (NULL);
}

void	*someone_dead(t_philosopher *philos, t_rules *rules, int i, long now)
{
	pthread_mutex_lock(&rules->death_lock);
	if (!rules->someone_died)
	{
		pthread_mutex_lock(&rules->print_lock);
		printf("%ld %d died\n", now - rules->start, philos[i].id);
		pthread_mutex_unlock(&rules->print_lock);
		rules->someone_died = 1;
	}
	pthread_mutex_unlock(&rules->death_lock);
	pthread_mutex_unlock(&philos[i].eat_lock);
	return (NULL);
}

int	is_finished(t_philosopher *philos, t_rules *rules)
{
	int	finished;
	int	i;

	i = 0;
	finished = 1;
	if (rules->meals_limit <= 0)
		return (0);
	while (i < rules->num_philos)
	{
		pthread_mutex_lock(&philos[i].eat_lock);
		if (philos[i].count_eat < rules->meals_limit)
			finished = 0;
		pthread_mutex_unlock(&philos[i].eat_lock);
		i++;
	}
	if (finished)
	{
		pthread_mutex_lock(&rules->death_lock);
		rules->someone_died = 1;
		pthread_mutex_unlock(&rules->death_lock);
	}
	return (finished);
}

int	check_died(t_rules *rules)
{
	pthread_mutex_lock(&rules->death_lock);
	if (rules->someone_died == 1)
	{
		pthread_mutex_unlock(&rules->death_lock);
		return (1);
	}
	pthread_mutex_unlock(&rules->death_lock);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philosophers.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/02 12:00:52 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 21:49:01 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	ft_philosophers(t_philosopher *philos, t_rules *rules)
{
	pthread_t	*threads;
	pthread_t	monitoring;
	int			i;

	threads = malloc(sizeof(pthread_t) * rules->num_philos);
	if (!threads)
		return ;
	i = 0;
	while (i < rules->num_philos)
	{
		if (pthread_create(&threads[i], NULL, philosopher_routine,
				&philos[i]) != 0)
		{
			pthread_mutex_lock(&rules->death_lock);
			rules->someone_died = 1;
			pthread_mutex_unlock(&rules->death_lock);
			break ;
		}
		i++;
	}
	if (pthread_create(&monitoring, NULL, monitor_routine, philos) == 0)
		pthread_join(monitoring, NULL);
	while (--i >= 0)
		pthread_join(threads[i], NULL);
	free(threads);
}

void	*philosopher_routine(void *arg)
{
	t_philosopher	*philo;
	t_rules			*rules;

	philo = (t_philosopher *)arg;
	rules = philo->rules;
	if (rules->num_philos == 1)
		return (ft_one_philo(philo, rules));
	if (philo->id % 2 == 0)
		usleep(1000);
	while (1)
	{
		if (check_someone_died(philo, rules))
			return (NULL);
		ft_take_forks(philo, rules);
		if (!advance_time(rules, rules->time_to_eat))
			return (unlock_and_return(rules, philo));
		log_action(philo, "is sleeping", rules);
		pthread_mutex_unlock(&rules->forks[philo->id % rules->num_philos]);
		pthread_mutex_unlock(&rules->forks[philo->id - 1]);
		if (!advance_time(rules, rules->time_to_sleep))
			return (NULL);
		log_action(philo, "is thinking", rules);
		if (rules->num_philos % 2 != 0)
			usleep(1000);
	}
}

void	ft_take_forks(t_philosopher *philo, t_rules *rules)
{
	int	left;
	int	right;

	left = philo->id - 1;
	right = (philo->id % rules->num_philos);
	if (philo->id % 2 == 0)
	{
		pthread_mutex_lock(&rules->forks[right]);
		log_action(philo, "has taken a fork", rules);
		pthread_mutex_lock(&rules->forks[left]);
		log_action(philo, "has taken a fork", rules);
	}
	else
	{
		pthread_mutex_lock(&rules->forks[left]);
		log_action(philo, "has taken a fork", rules);
		pthread_mutex_lock(&rules->forks[right]);
		log_action(philo, "has taken a fork", rules);
	}
	pthread_mutex_lock(&philo->eat_lock);
	philo->count_eat++;
	philo->last_meal = timestamp_ms();
	pthread_mutex_unlock(&philo->eat_lock);
	log_action(philo, "is eating", rules);
}

void	*ft_one_philo(t_philosopher *philo, t_rules *rules)
{
	pthread_mutex_lock(&rules->forks[0]);
	log_action(philo, "has taken a fork", rules);
	advance_time(rules, rules->time_to_die);
	pthread_mutex_lock(&rules->death_lock);
	if (!rules->someone_died)
	{
		pthread_mutex_lock(&rules->print_lock);
		printf("%ld %d died\n",
			timestamp_ms() - rules->start, philo->id);
		pthread_mutex_unlock(&rules->print_lock);
		rules->someone_died = 1;
	}
	pthread_mutex_unlock(&rules->death_lock);
	pthread_mutex_unlock(&rules->forks[0]);
	return (NULL);
}

void	*unlock_and_return(t_rules *rules, t_philosopher *philo)
{
	pthread_mutex_unlock(&rules->forks[philo->id - 1]);
	pthread_mutex_unlock(&rules->forks[philo->id % rules->num_philos]);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils_args.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ghenriqu <ghenriqu@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/28 19:58:06 by lgertrud          #+#    #+#             */
/*   Updated: 2025/10/11 21:15:38 by ghenriqu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static int	ft_isspace(int c)
{
	if (c == ' ' || c == '\t' || c == '\n'
		|| c == '\v' || c == '\f' || c == '\r')
		return (1);
	return (0);
}

static int	is_valid_number(char *str)
{
	int		i;
	long	num;

	i = 0;
	while (ft_isspace(str[i]))
		i++;
	if (str[i] == '+')
		i++;
	if (str[i] == '-' || !ft_isdigit(str[i]))
		return (0);
	while (str[i])
	{
		if (!ft_isdigit(str[i]) && !ft_isspace(str[i]))
			return (0);
		i++;
	}
	num = ft_atoi(str);
	if (num <= 0 || num > INT_MAX)
		return (0);
	return (1);
}

int	validate_args(int argc, char **argv)
{
	if (argc != 5 && argc != 6)
	{
		printf(ERROR_NUM_ARGS);
		return (0);
	}
	if (!check_caracters(argv))
	{
		printf(ERROR_NO_ISDIGIT);
		return (0);
	}
	return (1);
}

int	check_caracters(char **arr)
{
	int	i;

	i = 1;
	while (arr[i])
	{
		if (!is_valid_number(arr[i]))
			return (0);
		i++;
	}
	return (1);
}
